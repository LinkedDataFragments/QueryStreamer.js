#!/usr/bin/env node
/* A web proxy script to measure everything coming from the target.
 * Issuing a request containing the text 'closeProxy' will close the proxy and write the measurements to $ENV['PROXYBINSFILE']. */

var http = require('http'),
    httpProxy = require('http-proxy'),
    fs = require('fs'),
    RNG = require('rng');

var binLength = 100; // ms
var binIndex = 0;
var binsTotalBytes = [];
var binsRequests = [];
binsTotalBytes[0] = 0;
binsRequests[0] = 0;
var baseDelay = 100; // ms
var rng = new RNG('seed'); // To ensure same sequence of delays for each tests.

//var proxy = httpProxy.createProxyServer({target:'http://localhost:3000'}).listen(3001);

// Proxy definition
var proxy      = httpProxy.createProxyServer({}),
    proxy_func = function(req, res, target) {
      return function() {
        proxy.web(req, res, {target: target});
      };
    };

http.createServer(function (req, res) {
  // Run the proxy logic on each request after a timeout
  setTimeout(proxy_func(req, res, 'http://localhost:3000'), rng.poisson(baseDelay));
}).listen(3001);

proxy.on('end', function(req, res, response) {

  var host = req.headers.host;
  var bytesIn = response.socket._bytesDispatched;
  var bytesOut = response.socket.bytesRead;

  binsTotalBytes[binIndex] += bytesOut;
  binsRequests[binIndex]++;

});

proxy.on('proxyRes', function (proxyRes, req, res) {
  if(req.url.indexOf("closeProxy") > -1) {
    writeBins();
  }
});

function shedule() {
  setTimeout(function() {
    binIndex++;
    binsTotalBytes[binIndex] = 0;
    binsRequests[binIndex] = 0;
    shedule();
  }, binLength);
}
shedule();

function writeBins() {
  var data = {
    binLength: binLength,
    binSize: binIndex + 1,
    binsTotalBytes: binsTotalBytes,
    binsRequests: binsRequests,
  };
  if(!!process.env.PROXYBINSFILE) {
    var outputFilename = process.env.PROXYBINSFILE;
    fs.writeFile(outputFilename, JSON.stringify(data, null, 4));
  }
  proxy.close();
}