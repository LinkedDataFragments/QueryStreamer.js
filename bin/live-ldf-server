#!/usr/bin/env node
/* Starts a live train LDF data server with continuously updating data.
 * The input arguments have to be given via environment variables.
 * TYPE: {reification, singletonproperties, graphs, implicitgraphs, none}, defines the type of annotation.
 * INTERVAL (optional): 'true' or 'false' to enable resp. interval-annotation or overwriting expiration times.
 * UPDATEFREQUENCY: Declares the frequency in seconds at which the server data should update.
 * TARGET: The target URI this server is at. */

var util = require('../lib/RdfUtils.js')
    https = require('https'),
    cluster = require('cluster'),
    clc = require('cli-color');

var debugMode = !!process.env.DEBUG;
var implicitGraphIRIPrefix = process.env.TARGET || "http://localhost:3000/train";
var INTERVAL = process.env.INTERVAL == "true";

var updateFrequency = parseInt(process.env.UPDATEFREQUENCY) * 1000,
    futureTime = 2000,// The amount of time this server should run 'in the future', take this as maximum cycle execution time for optimal efficiency. Needed to avoid 'No newer data found' at clients.
    options = {
      host: 'irail.be',
      port: 443,
      path: '/stations/NMBS/008892007',
      method: 'GET',
      headers: {
        accept: 'application/json'
      }
    },
    latestData = {},
    spcounter = 0,
    graphcounter = 0,
    triplesToRemoveNext = [];

function update(worker) {
  if(server) {
    debugMode && console.log("Updating datasource...");
    getNewData(worker, function(data) {
      worker.send([
        {
          action:     'datasourcePush',
          datasource: 'train',
          data:       data.toPush,
        }
      ]);
      if(!INTERVAL) {
        worker.send([
          {
            action: 'datasourceRemove',
            datasource: 'train',
            data: data.toRemove,
          }
        ]);
        debugMode && process.stderr.write(clc.red("Removed " + data.toRemove.length + " quads/triples.\n"));
      }
      debugMode && process.stderr.write(clc.red("Added " + data.toPush.length + " quads/triples.\n"));
      debugMode && console.log("Will check back in " + updateFrequency / 1000 + " seconds.");
    });
  } else {
    debugMode && console.log("Server not started yet, waiting...");
  }
}

function scheduleUpdate(worker) {
  setTimeout(function() {
    update(worker);
    scheduleUpdate(worker);
  }, updateFrequency);
}

var server = require(process.env.SERVER);
if(cluster.isMaster) {
  cluster.on('online', function(worker) { // TODO: check if this is the worker we need
    update(worker);
    scheduleUpdate(worker);
  });
}

function getNewData(worker, callback) {
  // Get the contents of the API
  var request = https.request(options, function (res) {
    var data = '';
    res.on('data', function (chunk) {
      data += chunk;
    });
    res.on('end', function () {
      callback(updateData(JSON.parse(data)['@graph'], worker));
    });
  });
  request.on('error', function (e) {
    console.log(e.message);
  });
  request.end();
}

// Push a new triple to the triplestream for the current approach.
function pushTATriple(toPush, s, p, o) {
  return {
    reification: function() {
      var delayN = util.blankNodeContext();
      toPush.push(util.triple(delayN, util.prefixes.rdf + "subject", s));
      toPush.push(util.triple(delayN, util.prefixes.rdf + "predicate", p));
      toPush.push(util.triple(delayN, util.prefixes.rdf + "object", o));
      return delayN;
    },
    singletonproperties: function() {
      var label = p + "-" + spcounter;
      toPush.push(util.triple(
        s,
        label,
        o));
      return label;
    },
    graphs: function() {
      var label = util.prefixes.graphs + graphcounter;
      toPush.push(util.quad(
        s,
        p,
        o,
        label
      ));
      return label;
    },
    implicitgraphs: function() {
      toPush.push(util.triple(
        s,
        p,
        o
      ));
      return util.tripleToIRI(implicitGraphIRIPrefix, s, p, o, true);
    },
    none: function() {
      toPush.push(util.triple(
        s,
        p,
        o
      ));
      return false;
    }
  }[process.env.TYPE]();
}

// Update the counters for the current approach.
// This will make sure that for example TA graph triples will be grouped in a graph.
function postTAAction(toPush) {
  _ = {
    reification: noop,
    singletonproperties: function() {
      ["delay", "platform"].forEach(function(p) {
        p = util.prefixes.train + p;
        toPush.push(util.triple(
            p + "-" + spcounter,
            util.prefixes.sp + "singletonPropertyOf",
          p));
      });
      spcounter++;
    },
    graphs: function() {
      graphcounter++;
    },
    implicitgraphs: noop,
    none: noop
  }[process.env.TYPE]();
}

function updateData(newData) {
  var toUpdate = [];
  var toAddDelay = [];
  var canAdd = true;
  newData.forEach(function(train) {
    if(canAdd) {
      //canAdd=false; // TODO: temporary only allowed first train info element
      if(latestData[train['@id']]) {
        latestData[train['@id']].delay = train.delay;
        toAddDelay.push(train['@id']);
      } else {
        latestData[train['@id']] = train;
        toUpdate.push(train['@id']);
        toAddDelay.push(train['@id']);
      }
    }
  });

  var toPush = [];
  var toRemove = triplesToRemoveNext;
  triplesToRemoveNext = [];

  var toPushAndRemove = {
    push: function(el) {
      toPush.push(el);
      !INTERVAL && triplesToRemoveNext.push(el);
    }
  };

  // Static triples
  toUpdate.forEach(function(trainId) {
    var departureId = latestData[trainId]['@id'];
    var time = util.addSuffix(latestData[trainId]['scheduledDepartureTime'], util.suffixes.timestamp);
    var stop = latestData[trainId]['stop'];
    var headsign = "\"" + latestData[trainId]['headsign'] + "\"";
    var routeLabel = "\"" + latestData[trainId]['routeLabel'] + "\"";

    toPush.push(util.triple(stop, util.prefixes.train + "hasDeparture", departureId));
    toPush.push(util.triple(departureId, util.prefixes.train + "departureTime", time));
    toPush.push(util.triple(departureId, util.prefixes.train + "headSign", headsign));
    toPush.push(util.triple(departureId, util.prefixes.train + "routeLabel", routeLabel));
  });

  // Dynamic delay triples/quads
  var initial  = new Date(new Date().getTime() + futureTime).toISOString(),
      final    = new Date(new Date().getTime() + futureTime + updateFrequency).toISOString(),
      intervals = {}; // For SP & graph approach, this will always contain only one item.
  toAddDelay.forEach(function(trainId) {
    var delayV   = "\"" + latestData[trainId]['delay'] + "\"";
    var platform = "\"" + (latestData[trainId]['platform'] || "none") + "\"";
    intervals[pushTATriple(toPushAndRemove, trainId, util.prefixes.train + "delay", delayV, triplesToRemoveNext)] = true;
    intervals[pushTATriple(toPushAndRemove, trainId, util.prefixes.train + "platform", platform, triplesToRemoveNext)] = true;
  });

  for(var interval in intervals) {
    if (interval) {
      if (INTERVAL) {
        toPush.push(util.triple(interval, util.prefixes.tmp + "intervalInitial", util.addSuffix(initial, util.suffixes.timestamp)));
        toPush.push(util.triple(interval, util.prefixes.tmp + "intervalFinal", util.addSuffix(final, util.suffixes.timestamp)));
      } else {
        toPushAndRemove.push(util.triple(interval, util.prefixes.tmp + "expiration", util.addSuffix(final, util.suffixes.timestamp)));
      }
    }
  }

  postTAAction(toPush);

  return {toPush: toPush, toRemove: toRemove};
}

function noop() {}
