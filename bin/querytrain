#!/usr/bin/env node

var StreamingClient = require('../lib/StreamingClient'),
    clc = require('cli-color'),
    Table = require('cli-table');

var tempqueryfile = "./train.sparql",
    fs = require('fs'),
    query = fs.readFileSync(tempqueryfile).toString();

var debugMode = !!process.env.DEBUG;

process.on('uncaughtException', function (error) {
  console.log(error.stack);
});

var client = new StreamingClient(query, 'http://localhost:3000/train', durationCallback, process.env.CACHING == "true");
client.run(function(result, resultID) {
  var date = new Date(Date.parse(unQuote(result["?departureTime"])));
  var delay = unQuote(result["?delay"]);
  delay = parseInt(delay) / 60 || delay;
  var hourDelay = clc.yellow(date.getHours() + ":" + date.getMinutes()) + clc.red(delay == 0 ? "" : " + " + delay);

  /*var table = new Table({
    colWidths: [20, 100, 40]
  });
  table.push([
    unQuote(result["?platform"]),
    unQuote(result["?headSign"]) + " (" + unQuote(result["?routeLabel"]) + ")",
    hourDelay
  ]);
  console.log(table.toString()); // Fancy table*/

  var line = unQuote(result["?platform"]) + "\t" + unQuote(result["?headSign"]) + " (" + unQuote(result["?routeLabel"]) + ") \t\t ";
  debugMode && console.log(clc.yellow(line) + hourDelay);
});

function unQuote(s) {
  if(!s) return "";
  if(s.indexOf("^^") > 0) s = s.substr(0, s.indexOf("^^"));
  if (s != null && ((s.indexOf("\"") === 0 && s.lastIndexOf("\"") === s.length - 1)
    || (s.indexOf("'") === 0 && s.lastIndexOf("'") === s.length - 1))) {
    s = s.substring(1, s.length - 1);
  }
  return s;
}

function durationCallback(duration) {
  console.log(duration);
}