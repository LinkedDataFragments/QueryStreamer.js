#!/usr/bin/env node
/* This script will generate a dataset of 5 tracks that are playing on a radio to stdout. */

var N3   = require('../node_modules/n3/N3'), // TODO
    http = require('http'),
    util = require('../lib/RdfUtils.js'),
    clc = require('cli-color');

var source = "http://api.q-music.be/1.2/tracks/plays";

// Allowed types: reification, singletonproperties, graphs
var type = process.argv.length > 2 ? process.argv[2] : "reification";
var spcounter = 0;
var graphcounter = 0;

// Get the contents of the API
var request = http.request(source, function (res) {
    var data = '';
    res.on('data', function (chunk) {
        data += chunk;
    });
    res.on('end', function () {
        flushData(JSON.parse(data))
    });
});
request.on('error', function (e) {
    console.log(e.message);
});
request.end();

function flushData(data) {
    // TODO: writing and then parsing is not very efficient
    // hold everything in a buffer instead of immeditately writing it.
    // Just pass a custom writer to my functions here instead of changing them all.

    var initialOffset = 0;
    var startTime = new Date().getTime();
    //var incrementTime = 1000 * 60 * 3; // Three minutes
    var incrementTime = 1000 * 10; // 10 seconds

    writer = new N3.Writer(util.prefixes);
    for(var i = 0; i < data.played_tracks.length; i++) {
        var track = data.played_tracks[i];
        //var playedAt = track.played_at;
        var playedAt = new Date(initialOffset + startTime + i * incrementTime).toISOString();
        var playFinish = new Date(initialOffset + startTime + (i + 1) * incrementTime).toISOString();
        addTrackData(writer, track.slug, track.title, track.artist.slug, playedAt, playFinish);
        //console.log(track);
    }
    var output = "";
    writer.end(function (error, result) { output = result });

  // Turtle output
  //console.log(output + "\n\n\n");

  var config = {
    "title": "Time-Annotated Linked Data Fragments server",
    "datasources": {
      "radio": {
        "title": "Radio",
        "description": "Radio dataset",
        "type": "",
        "settings": {}
      }
    },

    "prefixes": util.prefixes
  };

  var parser = new N3.Parser();
  var triples = [];
  parser.parse(output, function (error, triple) {
    if (triple) {
      triples.push(triple);
    } else {
      // Done, flush config
      if(type == "graphs") {
        config.datasources.radio.type = "MemoryQuadDatasource";
        config.datasources.radio.settings.quads = triples;
        process.stderr.write(clc.red("Generated " + triples.length + " quads\n"));
      } else {
        config.datasources.radio.type = "MemoryDatasource";
        config.datasources.radio.settings.triples = triples;
        process.stderr.write(clc.red("Generated " + triples.length + " triples\n"));
      }
      console.log(JSON.stringify(config, null, " "));
    }
  });
}

function addTrackData(writer, trackId, trackTitle, artistId, playedAt, playFinish) {
    writer.addTriple(util.triple(util.prefixes.t + trackId, util.prefixes.m + "artist", util.prefixes.a + artistId));
    writer.addTriple(util.triple(util.prefixes.t + trackId, util.prefixes.m + "title", "\"" + trackTitle + "\""));

    playFinish = playFinish || addTimeOffset(playedAt, 1000 * 60 * 3);
    var params = util.createInterval(playedAt, playFinish);
    _ = {
        reification: function() {
            util.writeReification(writer, util.triple(util.prefixes.radio + "q-music", util.prefixes.m + "plays",
                    util.prefixes.t + trackId), params);
        },
        singletonproperties: function() {
            writer.addTriple(util.triple(
                    util.prefixes.m + "plays-" + spcounter,
                    util.prefixes.sp + "singletonPropertyOf",
                    util.prefixes.m + "plays"));
            writer.addTriple(util.triple(
                    util.prefixes.radio + "q-music",
                    util.prefixes.m + "plays-" + spcounter,
                    util.prefixes.t + trackId));
            util.writeBlankNode(writer, params, util.prefixes.m + "plays-" + spcounter);
            spcounter++;
        },
        graphs: function() {
          label = util.prefixes.graphs + graphcounter++;
          writer.addQuad(
              util.prefixes.radio + "q-music",
              util.prefixes.m + "plays",
              util.prefixes.t + trackId,
              label
          );
          util.writeBlankNode(writer, params, label);
        }
    }[type]();
}

function addTimeOffset(time, offset) {
    return new Date(Date.parse(time) + offset).toISOString();
}
